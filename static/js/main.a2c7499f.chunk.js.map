{"version":3,"sources":["components/NavStatus/NavStatus.js","components/Nav/Nav.js","components/Container/Container.js","components/Item/Item.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavStatus","state","status","animation","renderStatus","_this","_this2","this","score","_ref","topScore","newState","setState","setTimeout","react_default","a","createElement","className","concat","React","Component","Nav","props","Fragment","href","components_NavStatus_NavStatus","style","backgroundImage","Container","children","Item","onClick","handleClick","id","image","shake","Game","Characters","shuffleCharacters","i","length","j","Math","floor","random","temp","resetCharacters","map","item","Object","objectSpread","clicked","handleRight","rightCharacters","newScore","newTopScore","handleWrong","wrongCharacters","guessed","nextCharacters","newItem","components_Nav_Nav","components_Container_Container","components_Item_Item","key","App","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2c7499f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavStatus.css\";\n\nclass NavStatus extends React.Component {\n  state = {\n    status: \"\",\n    animation: false\n  };\n\n  componentWillReceiveProps({ score, topScore }) {\n    const newState = { animation: true };\n    if (score === 0 && topScore === 0) {\n      newState.status = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.status = \"wrong\";\n    } else {\n      newState.status = \"right\";\n    }\n    this.setState(newState, () =>\n      setTimeout(() => this.setState({ animation: false }), 500)\n    );\n  }\n\n  renderStatus = () => {\n    if (this.state.status === \"right\"){\n      return \"Correct!\"\n    }\n    else if (this.state.status === \"wrong\"){\n      return \"You missed!\"\n    }\n    else {\n      return \"Click on character to save...!\";\n    }\n  };\n\n  render() {\n    return (\n      <li className={`message ${this.state.animation ? this.state.status : \"\"}`}>\n        {this.renderStatus()}\n      </li>\n    );\n  }\n}\n\nexport default NavStatus;\n","import React from \"react\";\nimport NavStatus from \"../NavStatus/NavStatus.js\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n  <>\n  <nav className=\"navbar navbar-expand justify-content-between\">\n  <a className=\"nav-brand\" href=\"/\">Game of Clicks</a>\n    <ul className=\"navbar-nav\">\n      <li className=\"nav-item\">\n        Points: {props.score} | Top Score: {props.topScore}\n      </li>\n    </ul>\n      <NavStatus score={props.score} topScore={props.topScore} />\n  </nav>\n    <header className=\"header\" style={{ backgroundImage: `url(\"./assets/images/pattern.png\")` }}>>\n    <h1>Click Game!</h1>\n    <h2>\n      Click on an character to save,<br/> if you click twice on the same character...Game Over!!\n    </h2>\n  </header>\n  </>\n);\n\n\n\nexport default Nav;\n","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container = props => (\n  <>\n  <main className=\"container\">\n    <div className=\"row align-items-center\">{props.children}</div>\n  </main>\n  <footer className=\"footer\">\n    <div className=\"bottom\">\n      Game of Clicks\n    </div>\n  </footer>\n  </>\n  );\n\nexport default Container;\n","import React from \"react\";\nimport \"./Item.css\";\n\nconst Item = props => (\n  <div className=\"col-6 col-lg-3 \">\n  <div\n    onClick={() => props.handleClick(props.id)}\n    style={{ backgroundImage: `url(\"${props.image}\")` }}\n    className={`item ${props.shake ? \"shake\" : \"\"}`}\n  />\n  </div>\n);\n\nexport default Item;\n","import React from \"react\";\nimport Nav from \"../Nav/Nav.js\";\nimport Container from \"../Container/Container.js\";\nimport Item from \"../Item/Item.js\";\nimport Characters from \"../../Characters.json\";\n\nclass Game extends React.Component {\n  state = {\n    Characters,\n    score: 0,\n    topScore: 0\n  };\n  shuffleCharacters = (Characters) => {\n    for (var i = 0; i < Characters.length - 1; i++) {\n      var j = i + Math.floor(Math.random() * (Characters.length - i));\n      var temp = Characters[j];\n      Characters[j] = Characters[i];\n      Characters[i] = temp;\n    }\n    return Characters;\n  };\n\n  resetCharacters = (Characters) => {\n    const resetCharacters = Characters.map(item => ({ ...item, clicked: false }));\n    return this.shuffleCharacters(resetCharacters);\n  };\n\n  handleRight = (rightCharacters) => {\n    const newScore = this.state.score + 1;\n    const newTopScore = (newScore > this.state.topScore) ? newScore : this.state.topScore;\n    this.setState({\n      Characters: this.shuffleCharacters(rightCharacters),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleWrong = (wrongCharacters) => {\n    this.setState({\n      Characters: this.resetCharacters(wrongCharacters),\n      score: 0\n    });\n  };\n\n  handleClick = (id) => {\n    let guessed = false;\n    const nextCharacters = this.state.Characters.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id && !newItem.clicked) {\n        newItem.clicked = true;\n        guessed = true;\n      }\n      return newItem;\n    });\n    guessed ? this.handleRight(nextCharacters) : this.handleWrong(nextCharacters);\n  };\n\n  render() {\n    return (\n      <>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Container>\n          {this.state.Characters.map(item => (\n            <Item\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleClick}\n              image={item.image}\n            />\n          ))}\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game/Game.js\";\n\nconst App = () => <Game />;\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}